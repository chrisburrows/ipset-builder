#!/bin/bash

TMP_SUFFIX="_"

# lookup domain name and return an array of IP addresses
lookup_ip4() {
	local out=$(dig -4 $1 | grep -v "^;" | egrep 'IN[[:space:]]+A' | awk '{print $5}')
	echo ${out}
}

# create an ip hash set
create_set() {
	local name="$1"

	ipset create "${name}" hash:ip family inet hashsize 256 maxelem 256
}

# add IPs to a set
add_to_set() {
	local name=$1
	shift
	for ip in $*
	do
		ipset -! add ${name} $ip
	done
}

replace() {
        local name=$1
        shift
        local dns="$*"

        local tmp_set="${name}${TMP_SUFFIX}"
        ipset list "${tmp_set}" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
                flush "${tmp_set}"
        else
                create_set "${tmp_set}"
        fi

        for d in ${dns}
        do
                local iplist=$(lookup_ip4 ${d})

                # only add to the new set if DNS found some results
                if [ "${#iplist}" -ge 7 ]; then
                        add_to_set "${tmp_set}" ${iplist}
                fi
        done
        local size=$(ipset list ${tmp_set} | awk '/Number of entries/ {print $4}')
	# if the new set isn't empty, swap to make it active
        if [ ${size} -gt 0 ]; then
                swap "${name}"
        fi
}
swap() {
	local name=$1
	local tmp_set="${name}${TMP_SUFFIX}"

	ipset swap ${name} ${tmp_set}
}

flush() {
	local name="$1"

	ipset flush "${name}"
}


update() {
	# MEROSS
        replace meross \
                mqtt-eu-1.meross.com. \
                mqtt-eu-2.meross.com. \
                mqtt-eu-3.meross.com. \
                mqtt-eu-4.meross.com. \
                mqtt-eu-5.meross.com.

	# Google DNS
	replace google-dns dns.google.

	# Save Sets
	ipset save > /etc/iptables/ipsets
}

# run forever maintaining IP sets

while true; do
	update

	# repeat every 4 hours or so
	sleep 14400
done
